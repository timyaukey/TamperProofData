using System;
using System.IO;
using System.Security.Cryptography;

namespace Willowsoft.TamperProofData
{
    /// <summary>
    /// Validate an RSA cryptographic signature generated by a
    /// matching subclass of TamperProofData.Signer. Must be
    /// subclassed to implement GetPublicKey(), which must return
    /// the public key corresponding to the private key used by
    /// the TamperProofData.Signer subclass.
    /// Source code for subclasses, including the private/public key
    /// pair, is intended to be generated by
    /// TamperProofCoder.CodeFactory.OutputClasses().
    /// </summary>
    public abstract class Validator
    {
        private RSAParameters PublicKey_;

        public Validator()
        {
            PublicKey_ = GetPublicKey();
        }

        protected abstract RSAParameters GetPublicKey();

        /// <summary>
        /// Determine if the signature passed matches the data passed.
        /// Computes a SHA256 hash for the data, and validates this
        /// against the signature.
        /// </summary>
        /// <param name="data"></param>
        /// <param name="signature"></param>
        /// <returns>Returns true if the signature matches the data.</returns>
        public bool IsValid(byte[] data, byte[] signature)
        {
            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
            {
                rsa.ImportParameters(PublicKey_);
                //The hash to validate.
                byte[] hash;
                using (SHA256 sha256 = SHA256.Create())
                {
                    hash = sha256.ComputeHash(data);
                }
                //Create an RSAPKCS1SignatureDeformatter object and pass it the  
                //RSACryptoServiceProvider to transfer the key information.
                RSAPKCS1SignatureDeformatter deformatter = new RSAPKCS1SignatureDeformatter(rsa);
                deformatter.SetHashAlgorithm("SHA256");
                //Verify the hash and return the result. 
                bool isValid = deformatter.VerifySignature(hash, signature);
                return isValid;
            }
        }
    }
}
